{"mappings":"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","sources":["./src/terminal/TerminalCommand.ts","./src/terminal/TerminalLine.ts","./src/terminal/TerminalStringer.ts","./src/utils/StringPredictor.ts","./src/utils/TraversableArray.ts","./src/utils/TimeoutUtils.ts","./src/utils/Typewriter.ts","./src/terminal/TerminalCommandParser.ts","./src/index.ts","./src/terminal/Terminal.ts","./src/utils/Renderable.ts","./src/commands/Help.ts","./src/commands/Projects.ts","./src/commands/About.ts","./src/commands/Contact.ts","./src/commands/CLS.ts","./src/commands/Reset.ts","./src/commands/Echo.ts","./src/commands/Export.ts","./src/commands/TechnicalExport.ts","./src/commands/Goto.ts","./src/commands/PI.ts"],"sourcesContent":["import {Terminal} from './Terminal';\r\n\r\nexport interface CommandProperties {\r\n\tidentifier: string;\r\n\tusage?: string;\r\n\thidden?: boolean;\r\n}\r\n\r\nexport abstract class TerminalCommand {\r\n\tprotected abstract readonly properties: CommandProperties;\r\n\tprivate resolveInput: Function;\r\n\r\n\tpublic abstract invoke(terminal: Terminal, args: string[]): Promise<void>;\r\n\r\n\tpublic takeInput(input: string) {\r\n\t\tif (!this.resolveInput) return;\r\n\t\tthis.resolveInput(input);\r\n\t\tthis.resolveInput = undefined;\r\n\t}\r\n\r\n\tprotected openInput(terminal: Terminal) {\r\n\t\tterminal.openInput(this);\r\n\t\treturn new Promise<string>((resolve) => {\r\n\t\t\tthis.resolveInput = resolve;\r\n\t\t});\r\n\t}\r\n\r\n\tpublic getProperties() {\r\n\t\treturn this.properties;\r\n\t}\r\n}\r\n","export class TerminalLine {\r\n\tpublic static readonly ANIMATION_SETTINGS_DEFAULTS: LineAnimationSettings = {\r\n\t\tanimateTyping: true,\r\n\t\trandomAnimation: true,\r\n\t\tanimationSpeed: 20,\r\n\t\tdelayAfter: 250,\r\n\t\tblinkAfter: false,\r\n\t\tremoveBlinkAfterDelay: true,\r\n\t\tdelayBefore: 0,\r\n\t\tblinkBefore: false,\r\n\t};\r\n\r\n\tprivate content: string;\r\n\tprivate type: LineType;\r\n\tprivate indentLevel: number;\r\n\tprivate animationSettings: LineAnimationSettings;\r\n\r\n\tprivate lineElement: HTMLDivElement;\r\n\r\n\tconstructor(content: string = '', type: LineType = LineType.SOLO, indentLevel: number = 0) {\r\n\t\tthis.content = content;\r\n\t\tthis.type = type;\r\n\t\tthis.indentLevel = indentLevel;\r\n\t\tthis.animationSettings = {...TerminalLine.ANIMATION_SETTINGS_DEFAULTS};\r\n\t\tthis.genElement();\r\n\t}\r\n\r\n\tprivate genElement() {\r\n\t\tconst element = document.createElement('div');\r\n\r\n\t\telement.classList.add('line');\r\n\t\tif (!this.content) this.content = '&nbsp;';\r\n\r\n\t\tthis.lineElement = element;\r\n\t\tthis.applyAttributes();\r\n\t}\r\n\r\n\tprivate applyAttributes() {\r\n\t\tthis.lineElement.setAttribute('data-linetype', this.type.toLowerCase());\r\n\t\tthis.lineElement.setAttribute('data-indentlevel', `${this.indentLevel}`);\r\n\t}\r\n\r\n\tpublic getContent() {\r\n\t\treturn this.content;\r\n\t}\r\n\r\n\tpublic getType() {\r\n\t\treturn this.type;\r\n\t}\r\n\r\n\tpublic getIndentLevel() {\r\n\t\treturn this.indentLevel;\r\n\t}\r\n\r\n\tpublic getAnimationSettings() {\r\n\t\treturn this.animationSettings;\r\n\t}\r\n\r\n\tpublic getElement() {\r\n\t\treturn this.lineElement;\r\n\t}\r\n\r\n\tpublic setContent(content: string) {\r\n\t\tthis.content = content;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic setType(type: LineType) {\r\n\t\tthis.type = type;\r\n\t\tthis.applyAttributes();\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic setIndentLevel(indentLevel: number) {\r\n\t\tthis.indentLevel = indentLevel;\r\n\t\tthis.applyAttributes();\r\n\t\treturn this;\r\n\t}\r\n\r\n\t//Animation settings setters\r\n\tpublic setAnimationSettings(settings: LineAnimationSettings) {\r\n\t\tthis.animationSettings = settings;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic setAnimateTyping(animateTyping: boolean) {\r\n\t\tthis.animationSettings.animateTyping = animateTyping;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic setRandomAnimation(randomAnimation: boolean) {\r\n\t\tthis.animationSettings.randomAnimation = randomAnimation;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic setAnimationSpeed(animationSpeed: number) {\r\n\t\tthis.animationSettings.animationSpeed = animationSpeed;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic setDelayAfter(delayAfter: number) {\r\n\t\tthis.animationSettings.delayAfter = delayAfter;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic setBlinkAfter(blinkAfter: boolean) {\r\n\t\tthis.animationSettings.blinkAfter = blinkAfter;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic setRemoveBlinkAfterDelay(removeBlinkAfterDelay: boolean) {\r\n\t\tthis.animationSettings.removeBlinkAfterDelay = removeBlinkAfterDelay;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic setDelayBefore(delayBefore: number) {\r\n\t\tthis.animationSettings.delayBefore = delayBefore;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic setBlinkBefore(blinkBefore: boolean) {\r\n\t\tthis.animationSettings.blinkBefore = blinkBefore;\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nexport interface LineAnimationSettings {\r\n\tanimateTyping: boolean;\r\n\trandomAnimation: boolean;\r\n\tanimationSpeed: number;\r\n\tdelayAfter: number;\r\n\tblinkAfter: boolean;\r\n\tremoveBlinkAfterDelay: boolean;\r\n\tdelayBefore: number;\r\n\tblinkBefore: boolean;\r\n}\r\n\r\nexport enum LineType {\r\n\tRAW = 'RAW',\r\n\tSOLO = 'SOLO',\r\n\tSTART = 'START',\r\n\tEND = 'END',\r\n\tINDENT = 'INDENT',\r\n}\r\n\r\nexport const lineTypeSymbols: Map<LineType, string> = new Map();\r\nlineTypeSymbols.set(LineType.RAW, '');\r\nlineTypeSymbols.set(LineType.SOLO, '$');\r\nlineTypeSymbols.set(LineType.START, lineTypeSymbols.get(LineType.SOLO)!);\r\nlineTypeSymbols.set(LineType.END, lineTypeSymbols.get(LineType.SOLO)!);\r\nlineTypeSymbols.set(LineType.INDENT, '%');\r\n","import {Terminal} from './Terminal';\r\nimport {LineAnimationSettings, LineType, lineTypeSymbols, TerminalLine} from './TerminalLine';\r\n\r\nexport class TerminalStringer {\r\n\tprivate static readonly propertySeperator = '-';\r\n\tprivate static readonly propertyContentSeperator = '||';\r\n\tprivate static readonly animationSettingsPrefix = '(';\r\n\tprivate static readonly animationSettingsSuffix = ')';\r\n\r\n\tpublic static toString(terminal: Terminal) {\r\n\t\tconst convertedLines: string[] = [];\r\n\r\n\t\tterminal.getLines().forEach((line) => {\r\n\t\t\tconvertedLines.push(this.lineToString(line));\r\n\t\t});\r\n\r\n\t\treturn convertedLines.join('\\n');\r\n\t}\r\n\r\n\tpublic static toReadableString(terminal: Terminal) {\r\n\t\tconst convertedLines: string[] = [];\r\n\r\n\t\tterminal.getLines().forEach((line) => {\r\n\t\t\tconvertedLines.push(this.lineToReadableString(line));\r\n\t\t});\r\n\r\n\t\treturn convertedLines.join('\\n');\r\n\t}\r\n\r\n\tpublic static lineToString(terminalLine: TerminalLine) {\r\n\t\tconst animationSettings = terminalLine.getAnimationSettings();\r\n\r\n\t\tlet build = '';\r\n\r\n\t\tbuild += terminalLine.getType() + TerminalStringer.propertySeperator;\r\n\t\tbuild += terminalLine.getIndentLevel() + TerminalStringer.propertySeperator;\r\n\r\n\t\tbuild += TerminalStringer.animationSettingsPrefix;\r\n\t\tObject.values(animationSettings).forEach((val, i) => {\r\n\t\t\tbuild += val;\r\n\r\n\t\t\tif (i !== Object.keys(animationSettings).length - 1)\r\n\t\t\t\tbuild += TerminalStringer.propertySeperator;\r\n\t\t});\r\n\t\tbuild += TerminalStringer.animationSettingsSuffix;\r\n\r\n\t\tbuild += TerminalStringer.propertyContentSeperator;\r\n\t\tbuild += terminalLine.getContent();\r\n\r\n\t\treturn build;\r\n\t}\r\n\r\n\tpublic static lineToReadableString(terminalLine: TerminalLine) {\r\n\t\tlet build = '';\r\n\r\n\t\tif (terminalLine.getType() === LineType.START) build += '\\n';\r\n\r\n\t\tfor (let i = 0; i < terminalLine.getIndentLevel(); i++) {\r\n\t\t\tbuild += '\t';\r\n\t\t}\r\n\r\n\t\tbuild += lineTypeSymbols.get(terminalLine.getType()) + ' ';\r\n\t\tbuild += terminalLine.getContent();\r\n\r\n\t\tif (terminalLine.getType() === LineType.END) build += '\\n';\r\n\r\n\t\treturn build;\r\n\t}\r\n\r\n\tpublic static linesFromString(str: string) {\r\n\t\tconst lines = str.split('\\n');\r\n\r\n\t\tconst parsedLines: TerminalLine[] = [];\r\n\t\tlines.forEach((line) => {\r\n\t\t\tconst parsedLine = this.lineFromString(line);\r\n\t\t\tif (parsedLine) parsedLines.push(parsedLine);\r\n\t\t});\r\n\r\n\t\treturn parsedLines;\r\n\t}\r\n\r\n\tpublic static lineFromString(str: string) {\r\n\t\t//PARSE PROPERTIES\r\n\t\tconst propertyContentSplit = str.split(TerminalStringer.propertyContentSeperator);\r\n\t\tif (propertyContentSplit.length !== 2) return;\r\n\r\n\t\tconst line = new TerminalLine();\r\n\r\n\t\tconst linePropsAndAnimSettings = propertyContentSplit[0].split(\r\n\t\t\tTerminalStringer.propertySeperator,\r\n\t\t);\r\n\t\tline.setContent(propertyContentSplit[1]);\r\n\r\n\t\tconst lineProps = linePropsAndAnimSettings.splice(0, 2);\r\n\r\n\t\tconst lineType = LineType[<LineType>lineProps[0].toUpperCase()];\r\n\t\tif (!lineType) return;\r\n\t\tline.setType(lineType);\r\n\r\n\t\tconst indentLevel = isNaN(+lineProps[1]) ? 0 : +lineProps[1];\r\n\t\tline.setIndentLevel(indentLevel);\r\n\r\n\t\t//VALIDATE ANIMATION SETTINGS\r\n\t\tconst animationSettingsString = linePropsAndAnimSettings.join(\r\n\t\t\tTerminalStringer.propertySeperator,\r\n\t\t);\r\n\t\tif (\r\n\t\t\t!animationSettingsString.startsWith(TerminalStringer.animationSettingsPrefix) ||\r\n\t\t\t!animationSettingsString.endsWith(TerminalStringer.animationSettingsSuffix)\r\n\t\t)\r\n\t\t\treturn;\r\n\r\n\t\tconst animationSettings = animationSettingsString\r\n\t\t\t.replace(TerminalStringer.animationSettingsPrefix, '')\r\n\t\t\t.replace(TerminalStringer.animationSettingsSuffix, '')\r\n\t\t\t.split(TerminalStringer.propertySeperator);\r\n\r\n\t\tconst defaultsIterator = Object.keys(TerminalLine.ANIMATION_SETTINGS_DEFAULTS);\r\n\r\n\t\tif (animationSettings.length !== defaultsIterator.length) return;\r\n\r\n\t\t//PARSE ANIMATION SETTINGS\r\n\t\tconst animationSettingsBuild = {} as any;\r\n\t\tconst animationSettingsDefaults = {...TerminalLine.ANIMATION_SETTINGS_DEFAULTS} as any;\r\n\r\n\t\tdefaultsIterator.forEach((value, i) => {\r\n\t\t\tconst currentSetting = animationSettings[i];\r\n\t\t\tconst currentDefault = animationSettingsDefaults[value];\r\n\r\n\t\t\tconst desiredType = typeof currentDefault;\r\n\r\n\t\t\tlet parsedValue: any;\r\n\t\t\ttry {\r\n\t\t\t\tparsedValue = JSON.parse(currentSetting);\r\n\t\t\t\tif (typeof parsedValue !== desiredType) throw new Error();\r\n\t\t\t} catch (err) {\r\n\t\t\t\tparsedValue = currentDefault;\r\n\t\t\t}\r\n\r\n\t\t\tanimationSettingsBuild[value] = parsedValue;\r\n\t\t});\r\n\r\n\t\tline.setAnimationSettings(animationSettingsBuild as LineAnimationSettings);\r\n\r\n\t\treturn line;\r\n\t}\r\n}\r\n","export class StringPredictor {\r\n\tprivate values: string[] = [];\r\n\r\n\tconstructor(...defaults: string[]) {\r\n\t\tthis.push(...defaults);\r\n\t}\r\n\r\n\tpublic predict(input: string, returnRandom = true, returnTrimmed = true) {\r\n\t\tif (!input) return '';\r\n\r\n\t\tconst predictions: string[] = [];\r\n\r\n\t\tthis.values.forEach((value) => {\r\n\t\t\tif (value.toLowerCase().startsWith(input.toLowerCase())) {\r\n\t\t\t\tpredictions.push(value);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (!predictions.length) return '';\r\n\r\n\t\tif (returnRandom) {\r\n\t\t\tconst prediction = predictions[Math.floor(Math.random() * predictions.length)];\r\n\t\t\tif (returnTrimmed) return prediction.substring(input.length);\r\n\t\t\telse return prediction;\r\n\t\t} else return predictions;\r\n\t}\r\n\r\n\tpublic push(...values: string[]) {\r\n\t\tthis.values.push(...values);\r\n\t}\r\n\r\n\tpublic set(newValues: string[]) {\r\n\t\tthis.values = newValues;\r\n\t}\r\n}\r\n","export class TraversableArray<T = string> {\r\n\tprivate array: T[] = [];\r\n\tprivate pointer = 0;\r\n\r\n\tconstructor(...defaults: T[]) {\r\n\t\tthis.enter(...defaults);\r\n\t}\r\n\r\n\tpublic enter(...entries: T[]) {\r\n\t\tentries.forEach((entry) => {\r\n\t\t\tthis.array.push(entry);\r\n\t\t});\r\n\t}\r\n\r\n\tpublic get(i: number, end?: number) {\r\n\t\tif (!end) return this.array.slice(1, 1)[0];\r\n\t\telse return this.array.slice(i, end);\r\n\t}\r\n\r\n\tpublic rem(i: number, end?: number) {\r\n\t\tif (!end) return this.array.splice(1, 1)[0];\r\n\t\telse return this.array.splice(i, end);\r\n\t}\r\n\r\n\tpublic remSpecific(entry: T): T | undefined {\r\n\t\tconst i = this.array.indexOf(entry);\r\n\t\tif (i === -1) return;\r\n\t\telse return this.array.splice(i, 1)[0];\r\n\t}\r\n\r\n\tpublic current() {\r\n\t\treturn this.array[this.pointer];\r\n\t}\r\n\r\n\tpublic next() {\r\n\t\tif (this.array[this.pointer + 1]) this.pointer++;\r\n\t\telse this.toEnd();\r\n\t\treturn this.current();\r\n\t}\r\n\r\n\tpublic prev() {\r\n\t\tif (this.array[this.pointer - 1]) this.pointer--;\r\n\t\telse this.toStart();\r\n\t\treturn this.current();\r\n\t}\r\n\r\n\tpublic toStart() {\r\n\t\tthis.pointer = 0;\r\n\t}\r\n\r\n\tpublic toEnd() {\r\n\t\tthis.pointer = this.len() - 1;\r\n\t}\r\n\r\n\tpublic to(i: number) {\r\n\t\tthis.pointer = i;\r\n\t}\r\n\r\n\tpublic add(i: number) {\r\n\t\tthis.pointer += i;\r\n\t}\r\n\r\n\tpublic subtract(i: number) {\r\n\t\tthis.pointer -= i;\r\n\t}\r\n\r\n\tpublic divide(i: number) {\r\n\t\tthis.pointer /= i;\r\n\t}\r\n\r\n\tpublic multiply(i: number) {\r\n\t\tthis.pointer *= i;\r\n\t}\r\n\r\n\tpublic len() {\r\n\t\treturn this.array.length;\r\n\t}\r\n\r\n\tpublic currPos() {\r\n\t\treturn this.pointer;\r\n\t}\r\n\r\n\tpublic full() {\r\n\t\treturn this.array;\r\n\t}\r\n}\r\n","export function after<T = void>(ms: number, doThis: (...args: any[]) => T, ...withThese: any[]) {\r\n\treturn new Promise<T>((res) => {\r\n\t\tconst exec = () => (withThese ? res(doThis(...withThese)) : res(doThis()));\r\n\t\tms ? window.setTimeout(exec, ms) : exec();\r\n\t});\r\n}\r\n","import {TerminalLine, LineAnimationSettings} from '../terminal/TerminalLine';\r\nimport {after} from './TimeoutUtils';\r\n\r\nexport class Typewriter {\r\n\tprivate line: TerminalLine;\r\n\r\n\tprivate content: string;\r\n\tprivate element: HTMLElement;\r\n\tprivate settings: LineAnimationSettings;\r\n\r\n\tprivate index = 0;\r\n\r\n\tprivate resolve: Function;\r\n\r\n\tconstructor(line: TerminalLine) {\r\n\t\tthis.line = line;\r\n\t\tthis.content = this.line.getContent();\r\n\t\tthis.element = this.line.getElement();\r\n\t\tthis.settings = this.line.getAnimationSettings();\r\n\t}\r\n\r\n\tpublic start() {\r\n\t\tthis.element.classList.add('caret');\r\n\t\tif (this.settings.blinkBefore) this.element.classList.add('blinkcaret');\r\n\r\n\t\treturn new Promise<null>((resolve) => {\r\n\t\t\tthis.resolve = resolve;\r\n\r\n\t\t\tafter(this.settings.delayBefore, () => {\r\n\t\t\t\tthis.element.classList.remove('blinkcaret');\r\n\t\t\t\tif (this.settings.animateTyping) this.recurseType();\r\n\t\t\t\telse this.stop();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tprivate recurseType() {\r\n\t\tif (this.index < this.content.length) {\r\n\t\t\tconst speed = this.settings.randomAnimation\r\n\t\t\t\t? Math.random() * this.settings.animationSpeed\r\n\t\t\t\t: this.settings.animationSpeed;\r\n\r\n\t\t\tafter(speed, () => {\r\n\t\t\t\tthis.element.innerText += this.content.charAt(this.index);\r\n\t\t\t\tthis.element.scrollIntoView();\r\n\t\t\t\tthis.index++;\r\n\t\t\t\tthis.recurseType();\r\n\t\t\t});\r\n\t\t} else this.stop();\r\n\t}\r\n\r\n\tprivate stop() {\r\n\t\tthis.element.classList.remove('caret');\r\n\t\tif (this.settings.blinkAfter) this.element.classList.add('blinkcaret');\r\n\r\n\t\tafter(this.settings.delayAfter, () => {\r\n\t\t\tthis.element.innerHTML = this.content;\r\n\t\t\tif (this.settings.removeBlinkAfterDelay) this.element.classList.remove('blinkcaret');\r\n\t\t\tthis.resolve();\r\n\t\t});\r\n\t}\r\n}\r\n","import {Terminal} from './Terminal';\r\nimport {TerminalCommand} from './TerminalCommand';\r\n\r\nexport class TerminalCommandParser {\r\n\tprivate str: string;\r\n\tprivate terminal: Terminal;\r\n\r\n\tprivate command: TerminalCommand;\r\n\tprivate identifier: string;\r\n\tprivate args: string[];\r\n\r\n\tprivate valid: boolean;\r\n\r\n\tconstructor(strToParse: string, terminal: Terminal) {\r\n\t\tthis.str = strToParse;\r\n\t\tthis.terminal = terminal;\r\n\t\tthis.valid = this.parse();\r\n\t}\r\n\r\n\tprivate parse() {\r\n\t\tif (!this.validate()) return false;\r\n\r\n\t\tconst split = this.str.split(' ');\r\n\r\n\t\tthis.identifier = split.splice(0, 1)[0].trim().toLowerCase();\r\n\t\tthis.args = [...split];\r\n\r\n\t\tconst foundCommand = this.terminal\r\n\t\t\t.getCommands()\r\n\t\t\t.find((cmd) => cmd.getProperties().identifier.toLowerCase() === this.identifier);\r\n\r\n\t\tif (!foundCommand) return false;\r\n\t\tthis.command = foundCommand;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprivate validate() {\r\n\t\tif (!this.str.trim()) return false;\r\n\t\tif (this.str.split(' ')[0].includes(\"'\")) return false;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic isValid() {\r\n\t\treturn this.valid;\r\n\t}\r\n\r\n\tpublic hasArgs() {\r\n\t\treturn !!this.args.length;\r\n\t}\r\n\r\n\tpublic getCommand() {\r\n\t\treturn this.command;\r\n\t}\r\n\r\n\tpublic getIdentifier() {\r\n\t\treturn this.identifier;\r\n\t}\r\n\r\n\tpublic getArgs() {\r\n\t\treturn this.args;\r\n\t}\r\n}\r\n","import '../styles/terminal.css';\r\nimport {\r\n\tAboutCommand,\r\n\tCLSCommand,\r\n\tContactCommand,\r\n\tEchoCommand,\r\n\tExportCommand,\r\n\tGotoCommand,\r\n\tHelpCommand,\r\n\tPICommand,\r\n\tProjectsCommand,\r\n\tResetCommand,\r\n\tTechnicalExport,\r\n} from './commands';\r\nimport {Terminal} from './terminal/Terminal';\r\nimport {TerminalStringer} from './terminal/TerminalStringer';\r\n\r\nconst terminal = new Terminal();\r\n\r\nterminal.render(document.querySelector('body'), 'prepend');\r\n\r\nterminal.registerCommands(\r\n\tnew HelpCommand(),\r\n\tnew ProjectsCommand(),\r\n\tnew AboutCommand(),\r\n\tnew ContactCommand(),\r\n\tnew CLSCommand(),\r\n\tnew ResetCommand(),\r\n\tnew EchoCommand(),\r\n\tnew ExportCommand(),\r\n\tnew TechnicalExport(),\r\n\tnew GotoCommand(),\r\n\tnew PICommand(),\r\n);\r\n\r\nwindow.addEventListener('load', async () => {\r\n\tconst lines = localStorage.getItem('previousLines');\r\n\r\n\tif (lines) {\r\n\t\tconst parsedLines = TerminalStringer.linesFromString(lines);\r\n\r\n\t\tparsedLines.forEach((line) => {\r\n\t\t\tline.setAnimateTyping(false).setDelayAfter(0).setDelayBefore(0);\r\n\t\t});\r\n\r\n\t\tawait terminal.addLines(...parsedLines);\r\n\t\tlocalStorage.removeItem('previousLines');\r\n\t\tterminal.openInput();\r\n\t} else terminal.addDefaults();\r\n});\r\n\r\nwindow.addEventListener('beforeunload', () => {\r\n\tif (terminal.getLines().length > 1) {\r\n\t\tconst linesToSave = TerminalStringer.toString(terminal);\r\n\t\tlocalStorage.setItem('previousLines', linesToSave);\r\n\t}\r\n});\r\n","import {Renderable, RenderMethod} from '../utils/Renderable';\r\nimport {StringPredictor} from '../utils/StringPredictor';\r\nimport {TraversableArray} from '../utils/TraversableArray';\r\nimport {Typewriter} from '../utils/Typewriter';\r\nimport {TerminalCommand} from './TerminalCommand';\r\nimport {TerminalCommandParser} from './TerminalCommandParser';\r\nimport {TerminalLine} from './TerminalLine';\r\n\r\ntype InputContext = 'global' | TerminalCommand;\r\n\r\nexport class Terminal extends Renderable<HTMLSpanElement> {\r\n\tprivate commandInputElement: HTMLSpanElement;\r\n\tprivate commands: TerminalCommand[] = [];\r\n\r\n\tprivate lines: TerminalLine[] = [];\r\n\tprivate previousInputs = new TraversableArray();\r\n\tprivate inputContext: InputContext;\r\n\r\n\tprivate cmdPredictor: StringPredictor = new StringPredictor();\r\n\tprivate currentPrediction: string = '';\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.genCommandInputElement();\r\n\t}\r\n\r\n\t/** @override */\r\n\tpublic render(to: HTMLElement, renderMethod: RenderMethod = 'append') {\r\n\t\tif (renderMethod === 'append') to.appendChild(this.parentElement);\r\n\t\telse to.prepend(this.parentElement);\r\n\t}\r\n\r\n\tpublic async addLines(...lines: TerminalLine[]) {\r\n\t\tfor (let i = 0; i < lines.length; i++) {\r\n\t\t\tconst line = lines[i];\r\n\r\n\t\t\tthis.lines.push(line);\r\n\t\t\tthis.parentElement.appendChild(line.getElement());\r\n\t\t\tawait new Typewriter(line).start();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async addDefaults() {\r\n\t\tawait this.addLines(\r\n\t\t\tnew TerminalLine(\"Enter a command... try 'projects' or 'help'\").setDelayAfter(0),\r\n\t\t);\r\n\r\n\t\tthis.openInput();\r\n\t}\r\n\r\n\tprotected generateParentElement() {\r\n\t\tconst element = document.createElement('section');\r\n\r\n\t\telement.classList.add('terminal');\r\n\t\telement.tabIndex = 0;\r\n\r\n\t\treturn element;\r\n\t}\r\n\r\n\tprivate genCommandInputElement() {\r\n\t\tconst element = document.createElement('span');\r\n\r\n\t\telement.classList.add('command_input');\r\n\t\telement.contentEditable = 'true';\r\n\t\telement.spellcheck = false;\r\n\r\n\t\telement.addEventListener('blur', () => {\r\n\t\t\telement.focus();\r\n\t\t});\r\n\r\n\t\telement.addEventListener('keydown', (e: KeyboardEvent) => {\r\n\t\t\tswitch (e.key) {\r\n\t\t\t\tcase 'Tab': {\r\n\t\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\t\tif (this.currentPrediction) {\r\n\t\t\t\t\t\tthis.commandInputElement.innerText += this.currentPrediction;\r\n\t\t\t\t\t\tthis.currentPrediction = '';\r\n\t\t\t\t\t\tthis.commandInputElement.setAttribute(\r\n\t\t\t\t\t\t\t'data-prediction',\r\n\t\t\t\t\t\t\tthis.currentPrediction,\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcase 'Enter': {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tif (element.innerText.trim() !== '') {\r\n\t\t\t\t\t\tthis.parentElement.removeChild(this.commandInputElement);\r\n\t\t\t\t\t\tthis.dispatchCommand(this.commandInputElement.innerText);\r\n\t\t\t\t\t\tthis.commandInputElement.innerText = '';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcase 'ArrowUp': {\r\n\t\t\t\t\tthis.commandInputElement.innerText = this.previousInputs.prev();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcase 'ArrowDown': {\r\n\t\t\t\t\tthis.commandInputElement.innerText = this.previousInputs.next();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.currentPrediction = '';\r\n\t\t\tthis.commandInputElement.setAttribute('data-prediction', this.currentPrediction);\r\n\t\t});\r\n\r\n\t\telement.addEventListener('keyup', (e: KeyboardEvent) => {\r\n\t\t\tswitch (e.key) {\r\n\t\t\t\tcase 'Backspace': {\r\n\t\t\t\t\tconst content = this.commandInputElement.innerText;\r\n\r\n\t\t\t\t\tthis.currentPrediction = this.cmdPredictor.predict(content) as string;\r\n\r\n\t\t\t\t\tthis.commandInputElement.setAttribute(\r\n\t\t\t\t\t\t'data-prediction',\r\n\t\t\t\t\t\tthis.currentPrediction,\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\telement.addEventListener('keypress', (e: KeyboardEvent) => {\r\n\t\t\tthis.currentPrediction = this.cmdPredictor.predict(\r\n\t\t\t\tthis.commandInputElement.innerText + e.key,\r\n\t\t\t) as string;\r\n\r\n\t\t\tthis.commandInputElement.setAttribute('data-prediction', this.currentPrediction);\r\n\t\t});\r\n\r\n\t\tthis.commandInputElement = element;\r\n\t}\r\n\r\n\tpublic openInput(context: 'global' | TerminalCommand = 'global') {\r\n\t\tthis.parentElement.appendChild(this.commandInputElement);\r\n\t\tthis.parentElement.focus();\r\n\t\tthis.commandInputElement.focus();\r\n\t\tthis.commandInputElement.scrollIntoView();\r\n\t\tthis.inputContext = context;\r\n\t}\r\n\r\n\tpublic dispatchCommand(content: string) {\r\n\t\tif (this.inputContext !== 'global') {\r\n\t\t\tthis.inputContext.takeInput(content);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.currentPrediction = '';\r\n\t\tthis.previousInputs.enter(content);\r\n\t\tthis.previousInputs.to(this.previousInputs.len() - 1);\r\n\r\n\t\tconst parser = new TerminalCommandParser(content, this);\r\n\t\tif (!parser.isValid()) {\r\n\t\t\tthis.addLines(\r\n\t\t\t\tnew TerminalLine(\"That's not right... try 'help'?\").setDelayAfter(0),\r\n\t\t\t).then(() => {\r\n\t\t\t\tthis.openInput();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tparser.getCommand().invoke(this, parser.getArgs());\r\n\t}\r\n\r\n\tpublic clear() {\r\n\t\tthis.lines = [];\r\n\t\tthis.parentElement.innerHTML = '';\r\n\t}\r\n\r\n\tpublic registerCommands(...commands: TerminalCommand[]) {\r\n\t\tcommands.forEach((cmd) => {\r\n\t\t\tthis.commands.push(cmd);\r\n\t\t\tthis.cmdPredictor.set(this.getCommandIdentifiers());\r\n\t\t});\r\n\t}\r\n\r\n\tpublic getCommandInputElement() {\r\n\t\treturn this.commandInputElement;\r\n\t}\r\n\r\n\tpublic getCommands() {\r\n\t\treturn this.commands;\r\n\t}\r\n\r\n\tpublic getCommandIdentifiers() {\r\n\t\treturn this.commands.map((cmd) => cmd.getProperties().identifier);\r\n\t}\r\n\r\n\tpublic getLines() {\r\n\t\treturn this.lines;\r\n\t}\r\n}\r\n","export type RenderMethod = 'append' | 'prepend';\r\n\r\nexport abstract class Renderable<ElementType extends HTMLElement> {\r\n\tprotected parentElement: ElementType;\r\n\r\n\tconstructor() {\r\n\t\tthis.parentElement = this.generateParentElement();\r\n\t}\r\n\r\n\tprotected abstract generateParentElement(): ElementType;\r\n\r\n\tpublic render(to: HTMLElement, renderMethod: RenderMethod = 'append') {\r\n\t\tif (renderMethod === 'append') to.appendChild(this.parentElement);\r\n\t\telse to.prepend(this.parentElement);\r\n\t}\r\n\r\n\tpublic getParentElement() {\r\n\t\treturn this.parentElement;\r\n\t}\r\n}\r\n","import {Terminal} from '../terminal/Terminal';\r\nimport {TerminalCommand, CommandProperties} from '../terminal/TerminalCommand';\r\nimport {TerminalLine, LineType} from '../terminal/TerminalLine';\r\n\r\nexport class HelpCommand extends TerminalCommand {\r\n\tprotected readonly properties: CommandProperties = {\r\n\t\tidentifier: 'help',\r\n\t\tusage: '(page)',\r\n\t};\r\n\r\n\tprivate readonly PER_PAGE = 5;\r\n\r\n\tpublic async invoke(terminal: Terminal, args: string[]): Promise<void> {\r\n\t\tconst response: TerminalLine[] = [];\r\n\t\tconst commands = [...terminal.getCommands()].filter((cmd) => !cmd.getProperties().hidden);\r\n\r\n\t\tconst pages = Math.ceil(commands.length / this.PER_PAGE);\r\n\t\tlet pageNum: number;\r\n\t\tlet page: TerminalCommand[];\r\n\r\n\t\tif (args[0] && !isNaN(+args[0])) {\r\n\t\t\tpageNum = +args[0];\r\n\t\t} else pageNum = 1;\r\n\r\n\t\tpageNum = this.contain(pageNum, pages, 1);\r\n\t\tpage = commands.splice((pageNum - 1) * this.PER_PAGE, this.PER_PAGE);\r\n\r\n\t\tresponse.push(\r\n\t\t\tnew TerminalLine(`Available commands: (${pageNum}/${pages})`, LineType.START)\r\n\t\t\t\t.setAnimationSpeed(5)\r\n\t\t\t\t.setDelayAfter(0),\r\n\t\t);\r\n\r\n\t\tpage.forEach((cmd) => {\r\n\t\t\tconst {identifier, usage, hidden} = cmd.getProperties();\r\n\t\t\tif (!hidden) {\r\n\t\t\t\tresponse.push(\r\n\t\t\t\t\tnew TerminalLine(\r\n\t\t\t\t\t\t`'${identifier}${usage ? ` ${usage}` : ''}'`,\r\n\t\t\t\t\t\tLineType.INDENT,\r\n\t\t\t\t\t\t1,\r\n\t\t\t\t\t)\r\n\t\t\t\t\t\t.setAnimationSpeed(5)\r\n\t\t\t\t\t\t.setDelayAfter(0),\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tawait terminal.addLines(...response);\r\n\t\tterminal.openInput();\r\n\t}\r\n\r\n\tprivate contain(n: number, max: number, min: number) {\r\n\t\tn = Math.round(n);\r\n\t\tif (n > max) n = max;\r\n\t\tif (n < min) n = min;\r\n\t\treturn n;\r\n\t}\r\n}\r\n","import {Terminal} from '../terminal/Terminal';\r\nimport {TerminalCommand, CommandProperties} from '../terminal/TerminalCommand';\r\nimport {TerminalLine, LineType} from '../terminal/TerminalLine';\r\n\r\nexport class ProjectsCommand extends TerminalCommand {\r\n\tprotected readonly properties: CommandProperties = {\r\n\t\tidentifier: 'projects',\r\n\t};\r\n\r\n\tpublic async invoke(terminal: Terminal): Promise<void> {\r\n\t\tconst response: TerminalLine[] = [];\r\n\r\n\t\tresponse.push(new TerminalLine('My projects:', LineType.START));\r\n\r\n\t\tresponse.push(new TerminalLine('This website', LineType.INDENT, 1));\r\n\t\tresponse.push(\r\n\t\t\tnew TerminalLine(\r\n\t\t\t\t'<a target=\"_blank\" href=\"https://www.npmjs.com/package/tmijs-commander\">TMIJS Commander</a>',\r\n\t\t\t\tLineType.INDENT,\r\n\t\t\t\t1,\r\n\t\t\t),\r\n\t\t);\r\n\t\tresponse.push(\r\n\t\t\tnew TerminalLine(\r\n\t\t\t\t'<a target=\"_blank\" href=\"https://zyrakia.github.io/HyperStatus/\">HyperStatus (Abandoned, might redo someday)</a>',\r\n\t\t\t\tLineType.INDENT,\r\n\t\t\t\t1,\r\n\t\t\t),\r\n\t\t);\r\n\r\n\t\tresponse.push(new TerminalLine('Everything else is boring...', LineType.END));\r\n\r\n\t\tawait terminal.addLines(...response);\r\n\t\tterminal.openInput();\r\n\t}\r\n}\r\n","import {Terminal} from '../terminal/Terminal';\r\nimport {TerminalCommand, CommandProperties} from '../terminal/TerminalCommand';\r\nimport {TerminalLine, LineType} from '../terminal/TerminalLine';\r\n\r\nexport class AboutCommand extends TerminalCommand {\r\n\tprotected readonly properties: CommandProperties = {\r\n\t\tidentifier: 'about',\r\n\t};\r\n\r\n\tpublic async invoke(terminal: Terminal): Promise<void> {\r\n\t\tconst response: TerminalLine[] = [];\r\n\r\n\t\tresponse.push(new TerminalLine('About me:', LineType.START));\r\n\r\n\t\tresponse.push(new TerminalLine('', LineType.RAW));\r\n\t\tresponse.push(new TerminalLine('', LineType.RAW));\r\n\t\tresponse.push(new TerminalLine('I like web development.', LineType.INDENT, 1));\r\n\t\tresponse.push(new TerminalLine('', LineType.RAW));\r\n\t\tresponse.push(new TerminalLine('', LineType.RAW));\r\n\r\n\t\tresponse.push(new TerminalLine(\"Who cares, try 'projects'.\", LineType.END));\r\n\r\n\t\tawait terminal.addLines(...response);\r\n\t\tterminal.openInput();\r\n\t}\r\n}\r\n","import {Terminal} from '../terminal/Terminal';\r\nimport {TerminalCommand, CommandProperties} from '../terminal/TerminalCommand';\r\nimport {TerminalLine, LineType} from '../terminal/TerminalLine';\r\n\r\nexport class ContactCommand extends TerminalCommand {\r\n\tprotected readonly properties: CommandProperties = {\r\n\t\tidentifier: 'contact',\r\n\t};\r\n\r\n\tpublic async invoke(terminal: Terminal): Promise<void> {\r\n\t\tconst response: TerminalLine[] = [];\r\n\r\n\t\tresponse.push(new TerminalLine('My socials:', LineType.START));\r\n\r\n\t\tresponse.push(\r\n\t\t\tnew TerminalLine(\r\n\t\t\t\t'<a target=\"_blank\" href=\"https://www.twitter.com/zyrakia\">Twitter: @Zyrakia</a>',\r\n\t\t\t\tLineType.INDENT,\r\n\t\t\t\t1,\r\n\t\t\t),\r\n\t\t);\r\n\t\tresponse.push(new TerminalLine('Email: mailzyrakia@gmail.com', LineType.INDENT, 1));\r\n\r\n\t\tresponse.push(new TerminalLine('But why contact me?!', LineType.END));\r\n\r\n\t\tawait terminal.addLines(...response);\r\n\t\tterminal.openInput();\r\n\t}\r\n}\r\n","import {Terminal} from '../terminal/Terminal';\r\nimport {TerminalCommand, CommandProperties} from '../terminal/TerminalCommand';\r\n\r\nexport class CLSCommand extends TerminalCommand {\r\n\tprotected readonly properties: CommandProperties = {\r\n\t\tidentifier: 'cls',\r\n\t};\r\n\r\n\tpublic async invoke(terminal: Terminal): Promise<void> {\r\n\t\tterminal.clear();\r\n\t\tterminal.openInput();\r\n\t}\r\n}\r\n","import {Terminal} from '../terminal/Terminal';\r\nimport {TerminalCommand, CommandProperties} from '../terminal/TerminalCommand';\r\n\r\nexport class ResetCommand extends TerminalCommand {\r\n\tprotected readonly properties: CommandProperties = {\r\n\t\tidentifier: 'reset',\r\n\t\thidden: true,\r\n\t};\r\n\r\n\tpublic async invoke(terminal: Terminal): Promise<void> {\r\n\t\tterminal.clear();\r\n\t\tterminal.addDefaults();\r\n\t}\r\n}\r\n","import {Terminal} from '../terminal/Terminal';\r\nimport {TerminalCommand, CommandProperties} from '../terminal/TerminalCommand';\r\nimport {TerminalLine, LineType} from '../terminal/TerminalLine';\r\n\r\nexport class EchoCommand extends TerminalCommand {\r\n\tprotected readonly properties: CommandProperties = {\r\n\t\tidentifier: 'echo',\r\n\t\tusage: '[...contents]',\r\n\t};\r\n\r\n\tpublic async invoke(terminal: Terminal, args: string[]): Promise<void> {\r\n\t\tconst echoContent = args.join(' ');\r\n\r\n\t\tif (!echoContent) {\r\n\t\t\tawait terminal.addLines(new TerminalLine('Well at least give me something to echo...'));\r\n\t\t\tterminal.openInput();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tawait terminal.addLines(new TerminalLine(`${echoContent}`, LineType.RAW));\r\n\t\tterminal.openInput();\r\n\t}\r\n}\r\n","import {Terminal} from '../terminal/Terminal';\r\nimport {TerminalCommand, CommandProperties} from '../terminal/TerminalCommand';\r\nimport {TerminalLine} from '../terminal/TerminalLine';\r\nimport {TerminalStringer} from '../terminal/TerminalStringer';\r\n\r\nexport class ExportCommand extends TerminalCommand {\r\n\tprotected readonly properties: CommandProperties = {\r\n\t\tidentifier: 'export',\r\n\t};\r\n\r\n\tpublic async invoke(terminal: Terminal): Promise<void> {\r\n\t\tconst saveContent = TerminalStringer.toReadableString(terminal);\r\n\t\tnavigator.clipboard.writeText(saveContent);\r\n\r\n\t\tawait terminal.addLines(new TerminalLine('Saved terminal contents to clipboard.'));\r\n\t\tterminal.openInput();\r\n\t}\r\n}\r\n","import {Terminal} from '../terminal/Terminal';\r\nimport {TerminalCommand, CommandProperties} from '../terminal/TerminalCommand';\r\nimport {TerminalLine} from '../terminal/TerminalLine';\r\nimport {TerminalStringer} from '../terminal/TerminalStringer';\r\n\r\nexport class TechnicalExport extends TerminalCommand {\r\n\tprotected readonly properties: CommandProperties = {\r\n\t\tidentifier: 'techexport',\r\n\t\thidden: true,\r\n\t};\r\n\r\n\tpublic async invoke(terminal: Terminal): Promise<void> {\r\n\t\tconst saveContent = TerminalStringer.toString(terminal);\r\n\t\tnavigator.clipboard.writeText(saveContent);\r\n\r\n\t\tawait terminal.addLines(\r\n\t\t\tnew TerminalLine('Saved technical terminal contents to clipboard.'),\r\n\t\t);\r\n\r\n\t\tterminal.openInput();\r\n\t}\r\n}\r\n","import {Terminal} from '../terminal/Terminal';\r\nimport {TerminalCommand, CommandProperties} from '../terminal/TerminalCommand';\r\nimport {TerminalLine} from '../terminal/TerminalLine';\r\n\r\nexport class GotoCommand extends TerminalCommand {\r\n\tprotected readonly properties: CommandProperties = {\r\n\t\tidentifier: 'goto',\r\n\t\tusage: '(url)',\r\n\t};\r\n\r\n\tpublic async invoke(terminal: Terminal, args: string[]): Promise<void> {\r\n\t\tlet location = args[0];\r\n\r\n\t\tif (!location) {\r\n\t\t\tawait terminal.addLines(new TerminalLine('Where would you like to go?'));\r\n\t\t\tlocation = await this.openInput(terminal);\r\n\t\t}\r\n\r\n\t\tif (!location.includes('https://') || !location.includes('http://'))\r\n\t\t\tlocation = 'https://' + location;\r\n\r\n\t\ttry {\r\n\t\t\twindow.location.replace(location);\r\n\t\t} catch (error) {\r\n\t\t\tawait terminal.addLines(new TerminalLine('How do you expect me to send you there!?'));\r\n\t\t\tterminal.openInput();\r\n\t\t}\r\n\t}\r\n}\r\n","import {Terminal} from '../terminal/Terminal';\r\nimport {TerminalCommand, CommandProperties} from '../terminal/TerminalCommand';\r\nimport {TerminalLine} from '../terminal/TerminalLine';\r\n\r\nexport class PICommand extends TerminalCommand {\r\n\tprotected readonly properties: CommandProperties = {\r\n\t\tidentifier: '3.14',\r\n\t\thidden: true,\r\n\t};\r\n\r\n\tprivate PI1000 =\r\n\t\t'3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989';\r\n\r\n\tpublic async invoke(terminal: Terminal): Promise<void> {\r\n\t\tawait terminal.addLines(new TerminalLine(this.PI1000).setAnimationSpeed(1));\r\n\t\tterminal.openInput();\r\n\t}\r\n}\r\n"],"names":["$92fee0ded56078d5a075243f77b7ff9b$export$TerminalCommand","takeInput","input","this","resolveInput","undefined","openInput","terminal","Promise","resolve","getProperties","properties","$c7ecc1e8aec6846089b88572ec9f2513$export$TerminalLine","ANIMATION_SETTINGS_DEFAULTS","animateTyping","randomAnimation","animationSpeed","delayAfter","blinkAfter","removeBlinkAfterDelay","delayBefore","blinkBefore","constructor","content","type","$c7ecc1e8aec6846089b88572ec9f2513$export$LineType","SOLO","indentLevel","animationSettings","genElement","element","document","createElement","classList","add","lineElement","applyAttributes","setAttribute","toLowerCase","getContent","getType","getIndentLevel","getAnimationSettings","getElement","setContent","setType","setIndentLevel","setAnimationSettings","settings","setAnimateTyping","setRandomAnimation","setAnimationSpeed","setDelayAfter","setBlinkAfter","setRemoveBlinkAfterDelay","setDelayBefore","setBlinkBefore","LineType","$c7ecc1e8aec6846089b88572ec9f2513$export$lineTypeSymbols","Map","set","RAW","START","get","END","INDENT","$084ee3ac558f81ac26f5e6c7e379a3c6$export$TerminalStringer","convertedLines","getLines","forEach","line","push","lineToString","join","lineToReadableString","terminalLine","build","propertySeperator","animationSettingsPrefix","Object","values","val","i","keys","length","animationSettingsSuffix","propertyContentSeperator","str","lines","split","parsedLines","parsedLine","lineFromString","propertyContentSplit","linePropsAndAnimSettings","lineProps","splice","lineType","toUpperCase","isNaN","animationSettingsString","startsWith","endsWith","replace","defaultsIterator","animationSettingsBuild","animationSettingsDefaults","value","currentSetting","currentDefault","desiredType","parsedValue","JSON","parse","Error","err","$d41a3528261187d81fdc81a46a230c94$export$StringPredictor","defaults","predict","returnRandom","returnTrimmed","predictions","prediction","Math","floor","random","substring","newValues","$1fb38e4606a5cd36a36575bbbda4f1e7$export$TraversableArray","array","pointer","enter","entries","entry","end","slice","rem","remSpecific","indexOf","current","next","toEnd","prev","toStart","len","to","subtract","divide","multiply","currPos","full","$ac6059df56fe1967d13a4b84d524d65c$export$after","ms","doThis","withThese","res","exec","window","setTimeout","$63ff231b2c01da366b11e66358f9154d$export$Typewriter","index","start","remove","recurseType","stop","innerText","charAt","scrollIntoView","innerHTML","$6c9e1a2501f2e7d1b09bdf507c1f404a$export$TerminalCommandParser","strToParse","valid","validate","identifier","trim","args","foundCommand","getCommands","find","cmd","command","includes","isValid","hasArgs","getCommand","getIdentifier","getArgs","$fe6805ae6a1acc57369ff96015183e28$var$terminal","parentElement","generateParentElement","render","renderMethod","appendChild","prepend","getParentElement","commands","previousInputs","cmdPredictor","currentPrediction","super","genCommandInputElement","addLines","tabIndex","contentEditable","spellcheck","addEventListener","focus","e","key","preventDefault","commandInputElement","removeChild","dispatchCommand","context","inputContext","parser","invoke","then","clear","registerCommands","getCommandIdentifiers","getCommandInputElement","map","querySelector","usage","PER_PAGE","response","filter","hidden","pages","ceil","pageNum","page","contain","n","max","min","round","addDefaults","echoContent","saveContent","toReadableString","navigator","clipboard","writeText","toString","location","error","PI1000","async","localStorage","getItem","linesFromString","removeItem","linesToSave","setItem"],"version":3,"file":"index.6faae582.js.map"}